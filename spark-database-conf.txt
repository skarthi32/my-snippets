val citiesData = sparkSession.sqlContext.read.format("jdbc")
      .option("url", "jdbc:oracle:thin:" + properties.getProperty("oracleConnection"))
      .option("driver", "oracle.jdbc.driver.OracleDriver")
      .option("dbtable", "population_data")
      .option("user", properties.getProperty("oracleConnectionUsername"))
      .option("password", properties.getProperty("oracleConnectionPassword"))
      .load()
      
      

val userData = sparkSession.sqlContext.read.format("jdbc")
      .option("url", "jdbc:mysql://localhost/" + properties.getProperty("database"))
      .option("driver", "com.mysql.cj.jdbc.Driver")
      .option("dbtable", "users")
      .option("user", properties.getProperty("username"))
      .option("password", properties.getProperty("password"))
      .load()

    val departmentData = sparkSession.sqlContext.read.format("jdbc")
      .option("url", "jdbc:mysql://localhost/" + properties.getProperty("database"))
      .option("driver", "com.mysql.cj.jdbc.Driver")
      .option("dbtable", "department")
      .option("user", properties.getProperty("username"))
      .option("password", properties.getProperty("password"))
      .load()

    input.close()

    // Single Table

    userData.show

    userData.createOrReplaceTempView("users")

    userData.select("id").show

    userData.filter(userData("username").endsWith("1")).show

    // Join - Multi Table

    departmentData.show

    departmentData.createOrReplaceTempView("department")

    val joinTable = sparkSession.sqlContext.sql("select u.id, u.username, d.label " +
      "from users u join department d on u.id = d.id ")

    joinTable.filter(joinTable("username").endsWith("1")).show

    joinTable.show

    sparkSession.stop()
